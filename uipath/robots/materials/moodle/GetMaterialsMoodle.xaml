<Activity mc:Ignorable="sap sap2010" x:Class="GetMaterialsMoodle" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="courseName" Type="InArgument(x:String)" />
    <x:Property Name="tokenFile" Type="InArgument(x:String)" />
    <x:Property Name="coursesFile" Type="InArgument(x:String)" />
    <x:Property Name="materialsDestination" Type="InArgument(x:String)" />
    <x:Property Name="robotSuccess" Type="OutArgument(x:Boolean)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>2242.4,5603.2</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>GetMaterialsMoodle_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="76">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Management.Automation</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>UiPath.Credentials.Activities</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Form.Activities</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>System.Collections.Specialized</x:String>
      <x:String>UiPath.Web.Activities</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>Org.BouncyCastle.Utilities.Date</x:String>
      <x:String>System.Globalization</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="74">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.Management.Automation</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices.RuntimeInformation</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Word</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.Credentials.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Form.Activities</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>BouncyCastle.Crypto</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Private: GetMaterialsMoodle" sap:VirtualizedContainerService.HintSize="2252.8,5538.4" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Boolean" Default="False" Name="success" />
      <Variable x:TypeArguments="x:String" Default="./temp/response.json" Name="responsePath" />
      <Variable x:TypeArguments="x:String" Name="extractedToken" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="2211.2,5445.6" sap2010:WorkflowViewState.IdRef="TryCatch_3">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <TryCatch.Try>
        <Sequence DisplayName="Private: Sequence" sap:VirtualizedContainerService.HintSize="2174.4,5214.4" sap2010:WorkflowViewState.IdRef="Sequence_36">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Boolean" Name="existsTokenFile" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign sap:VirtualizedContainerService.HintSize="2132.8,60" sap2010:WorkflowViewState.IdRef="Assign_6">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Boolean">[existsTokenFile]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Boolean">[String.IsNullOrEmpty(tokenFile) = False]</InArgument>
            </Assign.Value>
          </Assign>
          <If Condition="[existsTokenFile]" sap:VirtualizedContainerService.HintSize="2132.8,269.6" sap2010:WorkflowViewState.IdRef="If_23">
            <If.Then>
              <ui:PathExists DisplayName="Path Exists" Exists="[existsTokenFile]" sap:VirtualizedContainerService.HintSize="333.6,90.4" sap2010:WorkflowViewState.IdRef="PathExists_5" Path="[tokenFile.Trim.Replace(&quot;&quot;&quot;&quot;,&quot;&quot;)]" PathType="File" />
            </If.Then>
          </If>
          <If Condition="[existsTokenFile = False]" DisplayName="Private: If" sap:VirtualizedContainerService.HintSize="2132.8,3836" sap2010:WorkflowViewState.IdRef="If_10">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence DisplayName="Private: RefreshToken &amp; Try Again" sap:VirtualizedContainerService.HintSize="420,334.4" sap2010:WorkflowViewState.IdRef="Sequence_20">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke Workflow File" sap:VirtualizedContainerService.HintSize="378.4,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="robots\materials\moodle\ExtractMoodleToken.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <OutArgument x:TypeArguments="x:String" x:Key="extractedToken">[extractedToken]</OutArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="tokenStorePath">[tokenFile]</InArgument>
                    <OutArgument x:TypeArguments="x:Boolean" x:Key="robotSuccess">[robotSuccess]</OutArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <ui:StartProcess WorkingDirectory="{x:Null}" Arguments="[&quot;-type materials -tval &quot; +  extractedToken + &quot; -cfile &quot;+ coursesFile + &quot; -rfile &quot; + responsePath + &quot; -cname &quot; + courseName]" ContinueOnError="True" DisplayName="Private: Start Process" FileName="[Environment.CurrentDirectory.Replace(&quot;uipath&quot;, &quot;util&quot;) + &quot;\moodle-api-request.exe&quot;]" sap:VirtualizedContainerService.HintSize="378.4,88" sap2010:WorkflowViewState.IdRef="StartProcess_16" />
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence DisplayName="Private: Sequence" sap:VirtualizedContainerService.HintSize="1668.8,3676.8" sap2010:WorkflowViewState.IdRef="Sequence_30">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:Boolean" Name="dismissed" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:InterruptibleDoWhile Condition="True" DisplayName="Do While" sap:VirtualizedContainerService.HintSize="1627.2,2771.2" sap2010:WorkflowViewState.IdRef="InterruptibleDoWhile_1">
                  <ui:InterruptibleDoWhile.Body>
                    <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="1592,2604" sap2010:WorkflowViewState.IdRef="Sequence_43">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:String" Name="tokenPass" />
                      </Sequence.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:SendHotkey ClickBeforeTyping="{x:Null}" DelayBefore="{x:Null}" DelayBetweenKeys="{x:Null}" DelayMS="{x:Null}" EmptyField="{x:Null}" SendWindowMessages="{x:Null}" Activate="True" DisplayName="Send Hotkey" sap:VirtualizedContainerService.HintSize="1550.4,117.6" sap2010:WorkflowViewState.IdRef="SendHotkey_1" Key="enter" KeyModifiers="None" SpecialKey="True">
                        <ui:SendHotkey.Target>
                          <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" Selector="{x:Null}" Id="473d7d6a-48e6-451b-8705-f2897f028495">
                            <ui:Target.TimeoutMS>
                              <InArgument x:TypeArguments="x:Int32" />
                            </ui:Target.TimeoutMS>
                            <ui:Target.WaitForReady>
                              <InArgument x:TypeArguments="ui:WaitForReady" />
                            </ui:Target.WaitForReady>
                          </ui:Target>
                        </ui:SendHotkey.Target>
                      </ui:SendHotkey>
                      <ui:InputDialog Options="{x:Null}" OptionsString="{x:Null}" DisplayName="Input Dialog" sap:VirtualizedContainerService.HintSize="1550.4,241.6" sap2010:WorkflowViewState.IdRef="InputDialog_1" IsPassword="True" Label="Input the password used to store the token value: " Title="Stored token password!">
                        <ui:InputDialog.Result>
                          <OutArgument x:TypeArguments="x:String">[tokenPass]</OutArgument>
                        </ui:InputDialog.Result>
                      </ui:InputDialog>
                      <Assign sap:VirtualizedContainerService.HintSize="1550.4,60" sap2010:WorkflowViewState.IdRef="Assign_4">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Boolean">[dismissed]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Boolean">[String.IsNullOrEmpty(tokenPass)]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <If Condition="[dismissed = False]" sap:VirtualizedContainerService.HintSize="1550.4,1972" sap2010:WorkflowViewState.IdRef="If_16">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If.Then>
                          <Sequence sap:VirtualizedContainerService.HintSize="1306.4,1812.8" sap2010:WorkflowViewState.IdRef="Sequence_41">
                            <Sequence.Variables>
                              <Variable x:TypeArguments="x:String" Name="logOutput" />
                            </Sequence.Variables>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:StartProcess WorkingDirectory="{x:Null}" Arguments="[&quot;-type materials  -tfile &quot; + tokenFile +  &quot; -tpass &quot; + tokenPass + &quot; -log ../logs/go.log&quot;  +&quot; -cfile &quot;+ coursesFile + &quot; -rfile &quot; + responsePath +  &quot; -cname &quot; + courseName]" ContinueOnError="True" DisplayName="Private: Start Process" FileName="[Environment.CurrentDirectory.Replace(&quot;uipath&quot;, &quot;util&quot;) + &quot;\moodle-api-request.exe&quot;]" sap:VirtualizedContainerService.HintSize="1264.8,88" sap2010:WorkflowViewState.IdRef="StartProcess_17" />
                            <Delay Duration="00:00:02" sap:VirtualizedContainerService.HintSize="1264.8,22.4" sap2010:WorkflowViewState.IdRef="Delay_9" />
                            <ui:PathExists DisplayName="Path Exists" Exists="[success]" sap:VirtualizedContainerService.HintSize="1264.8,90.4" sap2010:WorkflowViewState.IdRef="PathExists_3" Path="[responsePath]" PathType="File" />
                            <If Condition="[success]" sap:VirtualizedContainerService.HintSize="1264.8,1399.2" sap2010:WorkflowViewState.IdRef="If_18">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <Sequence sap:VirtualizedContainerService.HintSize="241.6,115.2" sap2010:WorkflowViewState.IdRef="Sequence_47">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:Break sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="Break_2" />
                                </Sequence>
                              </If.Then>
                              <If.Else>
                                <Sequence sap:VirtualizedContainerService.HintSize="979.2,1240" sap2010:WorkflowViewState.IdRef="Sequence_48">
                                  <Sequence.Variables>
                                    <Variable x:TypeArguments="x:String" Name="logTimeStamp" />
                                    <Variable x:TypeArguments="s:DateTime" Name="var" />
                                  </Sequence.Variables>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:ReadTextFile Content="[logOutput]" DisplayName="Read Text File" FileName="...\logs\go.log" sap:VirtualizedContainerService.HintSize="937.6,80.8" sap2010:WorkflowViewState.IdRef="ReadTextFile_2" />
                                  <Assign sap:VirtualizedContainerService.HintSize="937.6,60" sap2010:WorkflowViewState.IdRef="Assign_1">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">[logOutput]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">[logOutput.Split(Environment.NewLine.TocharArray, StringSplitOptions.RemoveEmptyEntries).Last]</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <Assign sap:VirtualizedContainerService.HintSize="937.6,60" sap2010:WorkflowViewState.IdRef="Assign_8">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">[logTimeStamp]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">[System.Text.RegularExpressions.Regex.Match(logOutput, "(\d{4})/(\d{2})/(\d{2})\s(\d{2}):(\d{2}):(\d{2})").Value.Trim]</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <If Condition="[(Now - Datetime.parseexact(logTimeStamp, &quot;yyyy/MM/dd HH:mm:ss&quot;, System.Globalization.CultureInfo.InvariantCulture)).TotalSeconds &gt; 5 or logOutput.Contains(&quot;message authentication failed&quot;) = False]" sap:VirtualizedContainerService.HintSize="937.6,826.4" sap2010:WorkflowViewState.IdRef="If_17">
                                    <If.Then>
                                      <Sequence sap:VirtualizedContainerService.HintSize="304,215.2" sap2010:WorkflowViewState.IdRef="Sequence_46">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_3">
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Boolean">[success]</OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                        <ui:Break sap:VirtualizedContainerService.HintSize="262.4,22.4" sap2010:WorkflowViewState.IdRef="Break_3" />
                                      </Sequence>
                                    </If.Then>
                                    <If.Else>
                                      <Sequence sap:VirtualizedContainerService.HintSize="589.6,667.2" sap2010:WorkflowViewState.IdRef="Sequence_51">
                                        <Sequence.Variables>
                                          <Variable x:TypeArguments="x:String" Name="tryButton" />
                                        </Sequence.Variables>
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:MessageBox Caption="{x:Null}" Buttons="YesNo" ChosenButton="[tryButton]" DisplayName="Message Box" sap:VirtualizedContainerService.HintSize="548,60" sap2010:WorkflowViewState.IdRef="MessageBox_27" Text="[&quot;Wrong password! If you want to try again press Yes! If not press No!&quot;]" />
                                        <If Condition="[tryButton.Equals(&quot;No&quot;)]" sap:VirtualizedContainerService.HintSize="548,474.4" sap2010:WorkflowViewState.IdRef="If_22">
                                          <If.Then>
                                            <Sequence sap:VirtualizedContainerService.HintSize="304,315.2" sap2010:WorkflowViewState.IdRef="Sequence_54">
                                              <sap:WorkflowViewStateService.ViewState>
                                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                </scg:Dictionary>
                                              </sap:WorkflowViewStateService.ViewState>
                                              <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_2">
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:Boolean">[success]</OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                                </Assign.Value>
                                              </Assign>
                                              <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_5">
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:Boolean">[dismissed]</OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                                </Assign.Value>
                                              </Assign>
                                              <ui:Break sap:VirtualizedContainerService.HintSize="262.4,22.4" sap2010:WorkflowViewState.IdRef="Break_1" />
                                            </Sequence>
                                          </If.Then>
                                          <If.Else>
                                            <ui:Continue sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="Continue_1" />
                                          </If.Else>
                                        </If>
                                      </Sequence>
                                    </If.Else>
                                  </If>
                                </Sequence>
                              </If.Else>
                            </If>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <ui:Break sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="Break_4" />
                        </If.Else>
                      </If>
                    </Sequence>
                  </ui:InterruptibleDoWhile.Body>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:InterruptibleDoWhile>
                <If Condition="[success = False]" sap:VirtualizedContainerService.HintSize="1627.2,772.8" sap2010:WorkflowViewState.IdRef="If_14">
                  <If.Then>
                    <Sequence DisplayName="RefreshToken &amp; Try Again" sap:VirtualizedContainerService.HintSize="752.8,593.6" sap2010:WorkflowViewState.IdRef="Sequence_35">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If Condition="[dismissed = False]" sap:VirtualizedContainerService.HintSize="711.2,219.2" sap2010:WorkflowViewState.IdRef="If_20">
                        <If.Then>
                          <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" DisplayName="Message Box" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="MessageBox_10" Text="[&quot;We had an error! The security token has proably changed, we need to extract it again!&quot;]" />
                        </If.Then>
                        <If.Else>
                          <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" DisplayName="Message Box" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="MessageBox_20" Text="[&quot;We will need to extract the security token again!&quot;]" />
                        </If.Else>
                      </If>
                      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Private: Invoke Workflow File" sap:VirtualizedContainerService.HintSize="711.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="robots\materials\moodle\ExtractMoodleToken.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <OutArgument x:TypeArguments="x:String" x:Key="extractedToken">[extractedToken]</OutArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="tokenStorePath">[tokenFile]</InArgument>
                          <OutArgument x:TypeArguments="x:Boolean" x:Key="robotSuccess">[robotSuccess]</OutArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                      <ui:StartProcess WorkingDirectory="{x:Null}" Arguments="[&quot;-type materials -tval &quot; +  extractedToken + &quot; -cfile &quot;+ coursesFile + &quot; -rfile &quot; + responsePath + &quot; -cname &quot; + coursename]" ContinueOnError="True" DisplayName="Private: Start Process" FileName="[Environment.CurrentDirectory.Replace(&quot;uipath&quot;, &quot;util&quot;) + &quot;\moodle-api-request.exe&quot;]" sap:VirtualizedContainerService.HintSize="711.2,88" sap2010:WorkflowViewState.IdRef="StartProcess_19" />
                    </Sequence>
                  </If.Then>
                </If>
              </Sequence>
            </If.Else>
          </If>
          <Delay Duration="00:00:02" sap:VirtualizedContainerService.HintSize="2132.8,22.4" sap2010:WorkflowViewState.IdRef="Delay_5" />
          <ui:PathExists DisplayName="Path Exists" Exists="[success]" sap:VirtualizedContainerService.HintSize="2132.8,90.4" sap2010:WorkflowViewState.IdRef="PathExists_4" Path="[responsePath]" PathType="File" />
          <If Condition="[success]" sap:VirtualizedContainerService.HintSize="2132.8,643.2" sap2010:WorkflowViewState.IdRef="If_21">
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="375.2,464" sap2010:WorkflowViewState.IdRef="Sequence_49">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:StartProcess WorkingDirectory="{x:Null}" Arguments="[Chr(34) + responsePath + Chr(34)  + &quot; &quot; + Chr(34) + materialsDestination + Chr(34)]" DisplayName="Private: Start Process" FileName="[Environment.CurrentDirectory.Replace(&quot;uipath&quot;, &quot;util&quot;) + &quot;\process-moodle-api.exe&quot;]" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="StartProcess_15" />
                <Delay Duration="00:00:04" sap:VirtualizedContainerService.HintSize="333.6,22.4" sap2010:WorkflowViewState.IdRef="Delay_6" />
                <ui:Delete ContinueOnError="{x:Null}" DisplayName="Private: Delete" sap:VirtualizedContainerService.HintSize="333.6,80.8" sap2010:WorkflowViewState.IdRef="Delete_4" Path="[responsePath]" />
                <Assign sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_7">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Boolean">[robotSuccess]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </If.Then>
          </If>
        </Sequence>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="2177.6,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke Workflow File" sap:VirtualizedContainerService.HintSize="333.6,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="robots\utils\LogError.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="errorMessage" xml:space="preserve">["Could not extract materials due to : "  + Exception.Message.ToString + " at " + Exception.Source.ToString]</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
  </Sequence>
</Activity>